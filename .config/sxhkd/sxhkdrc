#
# wm independent hotkeys
#

# terminal emulator
super + Return
    urxvt

super + shift + Return
  termite 2>/dev/null

# program launcher
super + space
	dmenu_run

# make sxhkd reload its configuration files:
super + Escape
	pkill -USR1 -x sxhkd

#
# bspwm hotkeys
#

# quit bspwm normally
super + alt + Escape
    bspc quit

# close and kill
super + {_,shift + }q
    bspc node -{c,k}

# alternate between the tiled and monocle layout
super + shift + f
    bspc desktop -l next


# Move focused desktop/node to previously focused monitor
#super + {_,shift + }y
#    bspc {desktop,node focused} -m next && bspc {desktop,node} -f last
super + shift + y
    bspc node focused -m next && bspc node -f last


# Rotate the tree that the current window belongs to
super + {_,shift + }c
    bspc node @parent -R {90,270}

# if the current node is automatic, send it to the last manual, otherwise pull the last leaf
super + y
	bspc query -N -n focused.automatic && bspc node -n last.!automatic || bspc node last.leaf -n focused

# swap the current node and the biggest node
super + b
    bspc node -s biggest

# Cycle between windows
super + {_,shift + }n
  bspc node -f {prev,next}

# Balance the size of all nodes in the current desktop
super + shift + b
    bspc desktop -B

# Focus previously current window
super + Tab
    bspc node -f last

# Focus previously current desktop
super + d
  bspc desktop -f last

#
# state/flags
#

# Toggle fullscreen/floating state
super + f
  bspc node -t \~fullscreen
super + s
  bspc node -t \~floating
super + t
  bspc node -t \~tiled

# Toggle locked state of current window
super + ctrl + comma
  bspc node -g locked && notify-send "Toggled locked state"

# Toggle sticky state of current window
super + ctrl + period
  bspc node -g sticky && notify-send "Toggled sticky state"

# Toggle private state of current window
super + ctrl + slash
  bspc node -g private && notify-send "Toggled private state"

#
# focus/swap
#

# Focus node
# If no window exist, target monitor/desktop instead
super + k
    bspc node -f north || bspc monitor -f north
super + j
    bspc node -f south || bspc monitor -f south
super + h
    bspc node -f west || bspc monitor -f west || bspc desktop -f west
super + l
      bspc node -f east || bspc monitor -f east || bspc desktop -f east

# Swap node
# If no node exist, send node to monitor instead
super + shift + h
    if ! bspc node -s west.local; then bspc node -m west && bspc node $(bspc query -N -n last) -f; fi
super + shift + l
    if ! bspc node -s east.local; then bspc node -m east && bspc node $(bspc query -N -n last) -f; fi
super + shift + k
    if ! bspc node -s north.local; then bspc node -m north && bspc node $(bspc query -N -n last) -f; fi
super + shift + j
    if ! bspc node -s south.local; then bspc node -m south && bspc node $(bspc query -N -n last) -f; fi

# Cycle non-empty between desktops and monitors
super + {_,ctrl + }bracket{left,right}
    bspc {desktop,monitor} -f {prev.occupied,next.occupied}

# Cycle between all desktops and monitors
super + shift + {_,ctrl + }bracket{left,right}
    bspc {desktop,monitor} -f {prev,next}


# focus the older or newer node in the focus history
super + {o,i}
	bspc wm -h off; \
	bspc node {older,newer} -f; \
	bspc wm -h on

# focus desktop or send to the given desktop
super + {_,shift + }{1-9,0}
	bspc {desktop -f,node -d} focused:'^{1-9,10}'

#
# preselect
#

# preselect the direction
super + ctrl + {h,j,k,l}
    bspc node -p {west,south,north,east}

# preselect the ratio
super + ctrl + {1-9}
	bspc node -o 0.{1-9}

# Adjust splitting ratio
super + {minus,equal}
  bspc node -r $(bspwm_noderatio {+10,-10})

# cancel the preselection for the focused node
super + ctrl + space
	bspc node -p cancel

# cancel the preselection for the focused desktop
super + ctrl + shift + space
	bspc query -N -d | xargs -I id -n 1 bspc node id -p cancel

#
# move/resize
#

# move a floating window
super + {Left,Down,Up,Right}
	bspc node -v {-20 0,0 20,0 -20,20 0}

# Resize current window
super + r : {_,shift + ,super + ,shift + super + }h
  val={200,100,50,10}; bspc node @west -r -${val} || bspc node @east -r -${val}
super + r : {_,shift + ,super + ,shift + super + }l
  val={200,100,50,10}; bspc node @west -r +${val} || bspc node @east -r +${val}
super + r : {_,shift + ,super + ,shift + super + }k
  val={200,100,50,10}; bspc node @north -r -${val} || bspc node @south -r -${val}
super + r : {_,shift + ,super + ,shift + super + }j
  val={200,100,50,10}; bspc node @north -r +${val} || bspc node @south -r +${val}

# focus
~button1
	bspc pointer -g focus

# use mod1 key in bspwmrc config to subsitute super
super + button{1-3}
    bspc pointer -g {move,resize_side,resize_corner}

super + @button{1-3}
    bspc pointer -u

# Move cursor
super + ctrl + m : {_,shift + ,shift + super + }{h,j,k,l}
    m={20,100,200} {x=-1 y=0,x=0 y=1,x=0 y=-1,x=1 y=0}; \
    xdotool mousemove_relative -- $(( m*x )) $(( m*y ))

# Move cursor to monitor corners
super + ctrl + m : super + {h,j,k,l}
    x=$(bspc query -T -d | json root.rectangle.x); x=$(( x + 50 )); \
    y=$(bspc query -T -d | json root.rectangle.y); y=$(( y + 50 ));  \
    w=$(bspc query -T -d | json root.rectangle.width); w=$(( w - 100 )); \
    h=$(bspc query -T -d | json root.rectangle.height); h=$(( h - 100 )); \
    dx=$(( x + w ));  dy=$(( y + h )); \
    xdotool mousemove {$x $y,$x $dy,$dx $y,$dx $dy}

# Simulate mouse button click
super + ctrl + m : {_,shift + ,ctrl + }space
    xdotool click {1,3,2}

XF86Audio{Raise,Lower}Volume
  amixer sset Master {5%+,5%-}

XF86MonBrightness{Up,Down}
    xbacklight {-inc 10,-dec 10}

XF86AudioMute
        amixer sset Master toggle

#---------------------------------------------------------
# monitor settings
#---------------------------------------------------------

# switch to another monitor
super + alt + {Left,Right}
    bspc monitor -f {next, prev}

# move the current window to next monitor
super + {_,shift + }{Left,Right}
    bspc {monitor -f, node -m} {next,prev}

# some misc settings
alt + shift + p
    p4v

alt + shift + t
    thunar

alt + shift + f
	firefox

alt + shift + r
    rofi -show run

alt + shift + e
    LC_CTYPE=zh_CN.utf8 emacs

# install by google-chrome-stable_current_amd64.deb
alt + shift + c
    chromium

alt + shift + w
    urxvt -e ranger

alt + shift + b
    bcompare
